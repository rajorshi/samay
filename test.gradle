dependencies {
    testCompile("junit:junit:4.11") {
        exclude module: "hamcrest-core"
    }
    testCompile('org.hamcrest:hamcrest-all:1.3')
    testCompile('org.mockito:mockito-all:1.8.4')
    testCompile('org.mock-server:mockserver-maven-plugin:3.9.17') {
        exclude group: 'org.slf4j'
    }
    testCompile ('org.glassfish.jersey.test-framework:jersey-test-framework-core:2.22.2')
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.22.2')

    testCompile ("org.elasticsearch:elasticsearch:2.3.3:tests")
    testCompile('org.apache.lucene:lucene-test-framework:5.5.0')
    testCompile("org.unitils:unitils-core:3.4.2")
    testCompile("nl.jqno.equalsverifier:equalsverifier:2.1")
}

// http://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/
// and the comments section
// integration test source-set
sourceSets {
    // Note that just declaring this source set creates two configurations.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }

        resources.srcDir file('src/integration-test/resources')
    }
}

//configurations {
//    testCompile.exclude group: 'org.glassfish.jersey.ext', module: 'jersey-spring3'
//}
configurations {
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    description = "Run integration tests (located in src/integration-test/...)."
    group = 'verification'
    testClassesDir = project.sourceSets.integrationTest.output.classesDir
    classpath = project.sourceSets.integrationTest.runtimeClasspath

    outputs.upToDateWhen { false }
}

// To generate separate html reports for unit and integration tests
tasks.withType(Test) {
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active', 'dev')
    reports.html.destination = file("${buildDir}/${name}")
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

integrationTest {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}